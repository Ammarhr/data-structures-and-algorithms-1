/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    // Can successfully instantiate an empty tree
    @Test void emptyTree() {
        BinaryTree<Integer> newTree = new BinaryTree<>(new Node<>(null));
        assertTrue(newTree instanceof BinaryTree);
        assertEquals("Empty List" , newTree.toString());
    }

    // Can successfully instantiate a tree with a single root node
    @Test void instantiateRoot() {
        BinaryTree<Integer> newTree = new BinaryTree<>(new Node<>(5));

        List<Integer> testList = new ArrayList<>();
        testList.add(5);

        assertEquals(testList , newTree.inOrder(newTree.root));
        assertEquals(5, newTree.root.value);
        assertEquals(null , newTree.root.leftChild);
        assertEquals(null , newTree.root.rightChild);
    }

    // Can successfully add a left child and right child to a single root node
    @Test void leftAndRightChild() {
        BinaryTree<Integer> newTree = new BinaryTree<>(new Node<>(5));
        Node<Integer> node1 = new Node<>(3);
        Node<Integer> node2 = new Node<>(1);
        newTree.root.rightChild = node2;
        newTree.root.leftChild = node1;

        assertEquals( 5 , newTree.root.value);
        assertEquals( 3 , newTree.root.leftChild.value);
        assertEquals( 1 , newTree.root.rightChild.value);
    }

    // Can successfully return traversal
    @Test void traversalTest() {

        BinaryTree<Integer> newTree = new BinaryTree<>(new Node<>(5));

        Node<Integer> node1 = new Node<>(2);
        Node<Integer> node2 = new Node<>(3);
        Node<Integer> node3 = new Node<>(1, node1, node2);
        Node<Integer> node5 = new Node<>(6);
        Node<Integer> node4 = new Node<>(4, node5, null);
        newTree.root.rightChild = node4;
        newTree.root.leftChild = node3;

        // Can successfully return a collection from a preorder traversal
        // Node order as perOrder  [5, 1, 2, 3, 4, 6]
        List<Integer> preTestList = new ArrayList<>();
        preTestList.add(5);
        preTestList.add(1);
        preTestList.add(2);
        preTestList.add(3);
        preTestList.add(4);
        preTestList.add(6);
        assertEquals( preTestList , newTree.preOrder(newTree.root));

        // Can successfully return a collection from a inOrder traversal
        // Node order as inOrder  [2, 1, 3, 5, 6, 4]
        List<Integer> inTestList = new ArrayList<>();
        inTestList.add(2);
        inTestList.add(1);
        inTestList.add(3);
        inTestList.add(5);
        inTestList.add(6);
        inTestList.add(4);
        assertEquals( inTestList , newTree.inOrder(newTree.root));

        // Can successfully return a collection from a postOrder traversal
        // Node order as postOrder  [2, 3, 1, 6, 4, 5]
        List<Integer> postTestList = new ArrayList<>();
        postTestList.add(2);
        postTestList.add(3);
        postTestList.add(1);
        postTestList.add(6);
        postTestList.add(4);
        postTestList.add(5);
        assertEquals( postTestList , newTree.postOrder(newTree.root));

        // Test all traversal
        String test = "preOrderList=[5, 1, 2, 3, 4, 6], inOrderList=[2, 1, 3, 5, 6, 4], postOrderList=[2, 3, 1, 6, 4, 5]";
        assertEquals(test , newTree.toString());
    }

    @Test void maximumValueEmpty() {

        // Test maximumValue if list is empty
        BinaryTree<Integer> newTree = new BinaryTree<>();
        assertEquals( 0 , newTree.maximumValue());

        // Test maximumValue if list has only the root
        newTree.root = new Node<>(5);
        assertEquals( 5 , newTree.maximumValue());

        // Test maximumValue in the happy path
        Node<Integer> node1 = new Node<>(2);
        Node<Integer> node2 = new Node<>(-5);
        Node<Integer> node3 = new Node<>(1, node1, node2);
        Node<Integer> node5 = new Node<>(6);
        Node<Integer> node4 = new Node<>(4, node5, null);
        newTree.root.rightChild = node4;
        newTree.root.leftChild = node3;
        assertEquals( 6, newTree.maximumValue());
    }

    @Test void breadthFirst() {

        // Test breadthFirst if list is empty
        BinaryTree<Integer> newTree = new BinaryTree<>();
        assertNull(App.breadthFirst(newTree));


        // Test breadthFirst if the tree has only the root
        newTree.root = new Node<>(5);
        ArrayList<Integer> testList = new ArrayList<>();
        testList.add(5);
        assertEquals( testList , App.breadthFirst(newTree));


        // Test breadthFirst in the happy path
        Node<Integer> node1 = new Node<>(2);
        Node<Integer> node2 = new Node<>(3);
        Node<Integer> node3 = new Node<>(1, node1, node2);
        Node<Integer> node5 = new Node<>(6);
        Node<Integer> node4 = new Node<>(4, node5, null);
        newTree.root.rightChild = node4;
        newTree.root.leftChild = node3;
        testList.add(1);
        testList.add(4);
        testList.add(2);
        testList.add(3);
        testList.add(6);
        assertEquals( testList, App.breadthFirst(newTree));
    }

    @Test void KTree() {
        kAryTree root = new kAryTree(3, 0);
        root.child[0] = new kAryTree(3, 2);
        root.child[1] = new kAryTree(3, 3);
        root.child[2] = new kAryTree(3, 5);
        root.child[0].child[0] = new kAryTree(3, 12);
        root.child[0].child[1] = new kAryTree(3, 22);
        root.child[0].child[2] = new kAryTree(3, 15);

        ArrayList<String> testList = new ArrayList<>();
        testList.add("Fizz");
        testList.add("\""+22+"\"");
        testList.add("\""+2+"\"");
        testList.add("FizzBuzz");
        testList.add("Fizz");
        testList.add("FizzBuzz");
        testList.add("Buzz");
        assertEquals( testList, root.treeFizzBuzz(root));
    }

}
