/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.checkerframework.checker.units.qual.A;
import org.checkerframework.checker.units.qual.C;

import java.util.ArrayList;
import java.util.EmptyStackException;

public class App {
    public static void main(String[] args) throws Exception {

        Stack<Integer> stackList = new Stack<>();
        stackList.push(2);
        stackList.push(1);
        stackList.push(8);
        stackList.push(10);

//        System.out.println(" ============ Stack =========== ");
//        System.out.println("Our List :" + stackList);
//        System.out.println("Is our list empty? " + stackList.isEmpty());
//        System.out.println("If we remove the head : " + stackList.pop());
//        System.out.println("Top New value is : " + stackList.peek());
//        System.out.println("Our New List :" + stackList);

        /* ----------------------------------------------------------- */

        Queue<String> queueList = new Queue<>();
        queueList.enqueue("2");
        queueList.enqueue("1");
        queueList.enqueue("8");
        queueList.enqueue("10");

//        System.out.println(" ============ Queue =========== ");
//        System.out.println("Our List :" + queueList);
//        System.out.println("Is our list empty? " + queueList.isEmpty());
//        System.out.println("If we remove the head : " + queueList.dequeue());
//        System.out.println("Top New value is : " + queueList.peek());
//        System.out.println("Our New List :" + queueList);
//        System.out.println(" ============================= ");

        /* ----------------------------------------------------------- */

//        PseudoQueue test = new PseudoQueue();
//        test.enqueue(5);
//        test.enqueue(3);
//        test.enqueue(2);
//        test.enqueue(4);
//        test.enqueue(6);
//        test.dequeue();
//        test.enqueue(10);
//        test.dequeue();
//        test.dequeue();
//        System.out.println(test.stack1.toString());

        /* ----------------------------------------------------------- */

//        AnimalShelter bothList = new AnimalShelter();
//        System.out.println(bothList);
//        bothList.enqueue(new Cat("tresa"));
//        bothList.enqueue(new  Cat("karaz"));
//        bothList.enqueue(new  Cat("mishmish"));
//        bothList.enqueue(new Cat("dodo"));
//        bothList.enqueue(new Dog("boby"));
//        bothList.enqueue(new Dog("spaik"));
//        bothList.enqueue(new Dog("tere"));
//        bothList.dequeue("cat");
//        bothList.dequeue("dog");
//        bothList.dequeue("wow");
//
//        System.out.println(bothList.catList.toString());
//        System.out.println(bothList.dogList.toString());

        /* ----------------------------------------------------------- */

        System.out.println( "True , while the result is --> " + brackets("[[[fe]]]"));
        System.out.println( "True , while the result is --> " + brackets("(({{   }}))"));
        System.out.println( "False , while the result is --> " + brackets("{()"));
        System.out.println( "False , while the result is --> " + brackets("[({}]"));
        System.out.println( "False , while the result is --> " + brackets("String )"));
        System.out.println( "True , while the result is --> " + brackets(""));
        System.out.println( "True , while the result is --> " + brackets("f"));
        System.out.println( "False , while the result is --> " + brackets("f((}}"));

    }

    public static boolean brackets(String bracketsString) {
        if (bracketsString.isEmpty()) return true;

        Stack<String> checkStack = new Stack<>();
        String[] arrToCheck = bracketsString.split("");

        for (String value: arrToCheck) {
            if ((value.equals("}") || value.equals("]") || value.equals(")")) && checkStack.isEmpty()) {
                return false;
            }
            if (value.equals("{") || value.equals("[") || value.equals("(")) {
                checkStack.push(value);
            } else if (value.equals("}")) {
                if (checkStack.top.value.equals("{")) checkStack.pop();
                else return false;
            } else if (value.equals(")")) {
                if (checkStack.top.value.equals("(")) checkStack.pop();
                else return false;
            } else if (value.equals("]")) {
                if (checkStack.top.value.equals("[")) checkStack.pop();
                else return false;
            }
        }
        return checkStack.isEmpty();
    }

}
